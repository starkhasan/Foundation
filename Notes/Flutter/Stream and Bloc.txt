Streams 
A stream is a sequence of asynchronous data.
in order to use the block library it is critical to have a basic understanding of Streams and how they work.
We can create a Stream in Dart by writing an asycn* (async generator) functions.

by marking a function as asycn we are able to use the yield keyword and return a Stream of data. In the above example, we are returning a Stream of integers up to the maz integer parameter.

Every time we yield in an asycn function we are pushing that piece of data through the Stream.
we  can consume the above Stream in several ways. If we wanted to write function to return the sun of a Streamm if integers it could look somwthing like

Future<int> sunStream(Stream<int> stream) async{
	int sum = 0;
	await for(int value in stream){
		sum+=value;
	}
	return sum;
}


by marking the function as async we are able to use the await keyword and return a Future of Integer.
we are awaiting each value in the stream and returning the sum of all integers in the stream.

void main() async {
    /// Initialize a stream of integers 0-9
    Stream<int> stream = countStream(10);
    /// Compute the sum of the stream of integers
    int sum = await sumStream(stream);
    /// Print the sum
    print(sum); // 45
}




Cubit : ----------------------
A Cubit is  a special type of Stream which is used as the base for the Bloc class.
States are the output of a Cubit and represent a part of your application's state. UI components can be notified of states and redraw portions of themselves based on the current state.


