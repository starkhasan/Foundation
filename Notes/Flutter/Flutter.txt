Flutter is an open source UI software development kit created by google . It is used to developed applications for Android IOS Windows Mac Linux Google Fuchsia and the web.
First version of Flutter was known as codename "Sky" and ran on the Android operating system.

It allows you to create a native mobile application with only one codebase. This means that you can use one programming language and one codebase to create two different apps (for IOS and Android).

Flutter consists to two important part:
=> An SDK (Software Development Kit):  A collection of tools that are going to help you develop your applications. This includes tools to compile your code into native machine code (code for IOS and Android).

=> A Framework (UI Libraray based on widget): A collection of reusable UI elements (buttons, text inputs, sliders and so on) that you can personalize for your own needs.

To develop with Flutter you will use a programming language called Dart. The language was created by Google in October 2011 but it has improved a lot these past years.

Dart focuses on front-end development and you can use it to create mobile and web applications.



There are several framework have introduced support both OS along with desktop apps. These types of the framework are known as cross-platform development tools.

The cross-platform development framework has the ability to write one code and code deploy on the various platform (Android,iOS, and Desktop). It saves a lot of time and development efforts of developers. There are several tools available for cross-development including web based tools, such as Ionic from DriftyCo in 2013, Phonegap from Adobe, Xamarian from Microsoft, and React Native from Facebook. Each of these framework has variying degrees of success in the mobile industry. 

Flutter is UI toolkit for creating fast beautiful natively compiled application for mobile , web and desktop with one programming language and single codebase. It is free and open source. Flutter apps use Dart programming language for creating an app. 


To be specified Flutter application is itself a widget Flutter widgets also support animations and gestures. The application login is based on reactive programming. Widget may optinally have a state



Features of Flutter :-------------------
1) Open Source
2) Cross Platform
3) Hot Reload
4) Accessible Native Features and SDKs
5) Minimal Code
6) Widgets



Various component of the structure of the application are explained here :-
1) android 		=> Auto generated source code to create android application
2) ios			=> Auto generated source code to create ios application
3) lib			=> Main folder containing Dart code written using flutter framework
4) lib/main.dart		=> Entry point of the Flutter application
5) test			=> Folder containing Dart code to test the flutter application
6) test/widget_test.dart	=> Sample code
7) .gitignore		=> Git version control file
8) .metadata		=> auto generated by flutter tools
9) .packages		=> auto generated track the flutter packages
10).iml 			=> project file used by Android studio



Let us understand the dart code line by line.
1) Line1
imports the flutter package material . The material is a flutter package to create user interface according to the Material design guidlines specified by Android.

2) Line 3
This in the entry point of the Flutter application. Calls runApp function and pass it an object of MyApp class.  The purpose of runApp function is to attach the given widget to the screen.

3) Line 5-17
Widget is used to create UI in flutter framework. StatelessWidget is a widget which does not maintain any state of the widget. MyApp extends StatelessWidget and override its build method use MaterialApp a widget to create the root level UI of the application.
It hash three properties 
=> title
=> theme
=> home

4) Line 19-38
MyHomePage is same as MyApp except it returns Scaffold Widget. Scaffold is a top level widget next to Material widget used to create UI conforming material design , It has two important properties (1) appbar to show the header of the application and  (2) body to show the actual content of the application. Appbar is another widget to render of the application and we have used it in appBar property. 


Scaffold widget top level widget after Material widget used to create UI conforming material design   => two important properties
1) appbar
2) body


Flutter Architecture :-----------------------------------

Widgets =>
The core concept of the Flutter framework is In Flutter Everthing is a widget.  Widget are basically user interface components used to create the user interface of the application.

In Flutter the application is itself a widget. The application is the top level widget and its UI is build using one or more children (widget), which again build using its children widgets.


Here the following points are worth notable :-
=> MyApp is the user created widget and it is build using Flutter native widget MaterialApp.
=> MaterialApp has a home property to specify the user interface of the home page, which is  again a user created widget MyHomePage.
=> MyHomePage is build using another flutter native widget Scaffold
=> Scaffold has two properties body and appBar
=> body is used to specify its main user interface and appbar is used to specify its header user interface.
=> Header UI is build using flutter native widget AppBar and Body UI is build using Center widget.
=> The Center widget has a property Child which refers the actual content and it is build using Text widget.



Gestures :---------------------
Flutter widget support interaction a special widget GestureDetector GestureDetector is an invisible widget having the ability to capture user interactions such as tapping dragging etc. 
We can also incorporate interactive faeture into the existing widget by composing it with the GestureDEtector widget.


Widget :------------------------
Widgets are nested with each other to build the app. It means the root of your app is it self a widget all the way down is a widget also. For example a widget can display something can define design can handle interaction etc.


	MyApp => MaterialApp => MyHomePage => Scaffold =>

AppBar 	Center	FloatingAction Button
Text 	Column	Icon
	Text
	Text






Types of Widget :------------------------------------
we can split the Flutter widget into two categories :
1) Visible (Output and Input)
2) Invisible (Layout and Control)

Visible widget ==> The visible widget are related to the user input and output data. Some of the important types of this widget are:

Text
Button
Image


Center :-----------------------
Center is a layout widget . It takes a single child and positions it
in the middle of the parent

Column is also a layout widget.It takes a list of children and arrange them vertically. By default it sizes itself to fit its children horizontally and tries to be as tall as its parent.




Text Properties in Flutter :---------------------------------
The Text widget displays a string of text with single style. The string might break across multiple lines or might all be displayed on the same line depending on the layout constraints.

Using the Text.ricj constructor the Text widget can display a paragraph with differently styled TextSpans. The sample that follows displays.

Constructors :-
Text(String data, {Key key, TextStyle style, StrutStyle strutStyle, TextAlign textAlign, TextDirection textDirection, Locale locale, bool softWrap, TextOverflow overflow, double textScaleFactor, int maxLines, String semanticsLabel, TextWidthBasis textWidthBasis})







What is the Difference Between Stateful and Stateless Widget  :---------------------------------------------------

As you know in Flutter all the UI components are known as widgets. The widget which contains the code for a single screen of the app can be just of two types ---

1) Stateless
2) Stateful


Stateless :-------------------------
Stateless widget do not require mutable state it is immutable.
In simple words Stateless widget cannot change their state during the runtime of the app, which means the widget cannot be redrawn cannot be redrawn while the app is in action.

class StartScreen extends StatelessWidget{
	@override
	Widget build(BuildContext context){
		return Container(
		);
	}
}


The name of this Stateless Widget is StartScreen inside which we have to override the build method.  This build method takes in a BuildContext as the parameter and returns a widget. And this the place where you can design the UI of this screen which is Stateless.

In Stateless widget, The build method can be called only ONCE while the app is in action which is responsible for drawing the widgets on the device screen.




Stateful =>
Stateful widgets have a mutable state they are mutable and can be drawn multiple times with in its life time.
 They are the widgets which can change their state multiple times and can be redrawn on to the screen any number of times while the app is in action


Structure of Stateful widget looks like :-


class StartScreen extends StatefulWidget{

	@override
	_StartScreenState createState() => _StartScreenState();
}

class _StartScreenState extends State<StartScreen>{
	@override
	Widget build(BuildContext context){
	return Container(
	
	);
         }
}


Now, this “_StartScreenState” overrides the “build” method and returns a widget. This is where you can define the UI of the app, which is Stateful. As it is a Stateful widget you can call the build method any number of times, which will redraw the widgets on the screen.


So, how can you call the build method?
It’s really easy, you can use the “setState” method to call the build method, which will, in turn, redraw the widgets. This is the most important method you will need to use with any Stateful widget, to really use the statefulness of the widget.


call setState tells the Flutter framework that something has changed in this State, which causes it to rerun the build method below so that the display can reflect the updated values. It we changed _counter without calling setState() then the build method would not be called again and so nothing would appear to happen.





The name of the widget is again "StartScreen" but now it overrides the "createState" method instead of the build methods which returns the instance of the class _StartScreenState.

The class _StartScreenState  extends from State<> which takes StartScreen as  template input.






Types of Widget :----------------------------------------
 We can split the Flutter widget into two categories:
1) Visible (Output and Input)
2) Invvisible (Layout and Control)

Visible widget :---------------------- 
The visible widget are related to the user input and outputdata.SOme of the important type of this widget are
1) Text
2) Button
3) Image

Image widget hold the image which can fetch it from multiple source like from the assets folder or directly from the URL. It provides many constructors for loading image which are given below:
=> Image It is generic loader which is used by ImageProvide
=> assets It load image from your project asset folder
=> file It loads image from the system folder
=> memory It load image from memory
=> network It load image from the network

To add an image in the project we need to first  create folder where we keep our image and then add.


Invisible widget :----------------------------
The invisible widget is a type that arranges all its children widget in  vertical alignment. It provides spacing between the widget by using the mainAxisAlignment and crossAxisAlignment properties. In these properties the main axis is the vertical axis and the cross axis is the horizontal axis.

Row

The row widget is similar to the column widget, but it constructs a widget horizontally rather than vertically. Here, the main axis is the horizontal axis, and the cross axis is the vertical axis.


Center

This widget is used to center the child widget, which comes inside it. All the previous examples contain inside the center widget.


Scaffold :---------------------------------------------
This widget provides a framework that allows you to add common material design element like AppBar, Floating Action Button, Drawer etc.

Stack :---------------------------------
It is an essential widget which is mainly used for overlapping a widget such as button on a background gradient.



Flutter Layout :----------------------------------
The main concept of the layout mechanism is the widget. we know that flutter assume everthing as a widget. So the image, icon text and even the layout of your app are all widget. Here some of the thing you don't see on your app UI such as row column and grid that arrange contrain and alig  the visible widget are also the widgets.



Multiple Child Widget  :-------------------------------

The Multiple Child widget are a type of widget which contain more than one child widget and the layout of these widget are unique. For example Row widget laying out of its child widget in horizontal direction and Column widget laying out of its child widget in a vertical direction. If we combine the row and column widget then it can build any level of the complex widget.


Row => It allow to arrange its child widget in horizontal direction.

Column => It allows to arrange its child widget in a vertical dirction.

ListView => It is most popular scrolling widget that allow us to arrange its child widget one after another in scroll direction.

GridView => it allow us to arrange its child widget as a scrollable 2D array of widgets. It consist of a repeated pattern of cells arrayed in a horizontal and vertical layout.

Expanded => It allows to make the children of a Row and Column widget to occupy the maximum possible area.
Table => It is a widget that allows us to arrange its children in a table based widget.
Flow => it allows us to implements the flow based widget
Stack => used for overlapping several children widgets.


Basic widget :--------------------------------------------
Flutter comes with a suite of powerful basic widgets of which the following are commonly used:

=> Text
The Text widget lets you create a run of styled text within out application.

=> Row, Column
These flex widget let you create flexible layouts in both the horizontal (Row) and vertical (Column) direction. The design of these object is bead on the web's flex layout model.

=> Stack
Instead of being oriented (either horizontal or vertically)  stack widget lets you place widget on top of each other in paint order you can then use the positioned widget on children of Stack to position them relative to the top right bottom or left edge of the stack. Stack are based on the web's absolute positioning layout model.

=> Container
The Container widget lets you create a reactangle visual element. A container can be decorated with BoxDecoration such as a background a border or a shadow. A container can also have margin padding and constraints applies to its size. In addition a Container can be transformed in three dimensional space using a matrix.


Be Sure to have a user-material-design:true entry in the flutter section of your pubsec.yaml file. It allows you to use the predefined set of material icons.


=> MaterialApp Widget which builds a number of useful widget at the root of your app, including a Navigator which manages a stack of widget identifies by string also known as routes. The Navigator lets you transition smoothly between screens of your appication.







Adding assets and images :-----------------------------
Flutter apps can include code and assets (sometimes called resource). An assets is a file bundled and deployed with your app and is accessible at runtime. Common types of assets include static data (for example, JSON files), configuration files, icons and images (JPEG,WebP,GIF,animation,WebP/GIF,PNG,BMP and WBMP).

Specifying assets :-------------------------
Flutter uses the pubspec.yaml file located at the root of our project to identifying assets required by an app.

